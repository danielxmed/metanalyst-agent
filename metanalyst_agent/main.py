"""
Arquivo principal para execu√ß√£o do sistema metanalyst-agent.
"""

import argparse
import sys
from datetime import datetime
from .graph.multi_agent_graph import run_meta_analysis, visualize_graph
from .models.config import config

def main():
    """Fun√ß√£o principal do sistema metanalyst-agent."""
    
    parser = argparse.ArgumentParser(
        description="Metanalyst-Agent: Sistema automatizado de meta-an√°lise m√©dica"
    )
    
    parser.add_argument(
        "query",
        nargs="?",
        help="Query de meta-an√°lise a ser executada"
    )
    
    parser.add_argument(
        "--memory",
        action="store_true",
        help="Usar persist√™ncia em mem√≥ria (desenvolvimento)"
    )
    
    parser.add_argument(
        "--thread-id",
        type=str,
        help="ID da thread para continua√ß√£o de sess√£o"
    )
    
    parser.add_argument(
        "--visualize",
        action="store_true",
        help="Gerar visualiza√ß√£o do grafo"
    )
    
    parser.add_argument(
        "--examples",
        action="store_true",
        help="Mostrar exemplos de queries"
    )
    
    args = parser.parse_args()
    
    # Mostrar exemplos
    if args.examples:
        show_examples()
        return
    
    # Visualizar grafo
    if args.visualize:
        print("Gerando visualiza√ß√£o do grafo...")
        visualize_graph()
        return
    
    # Verificar se query foi fornecida
    if not args.query:
        print("‚ùå Erro: Query de meta-an√°lise √© obrigat√≥ria")
        print("Use --help para ver op√ß√µes dispon√≠veis")
        print("Use --examples para ver exemplos de queries")
        sys.exit(1)
    
    # Executar meta-an√°lise
    print("üöÄ Iniciando sistema metanalyst-agent...")
    print(f"üìã Query: {args.query}")
    print(f"üíæ Modo: {'Mem√≥ria' if args.memory else 'PostgreSQL'}")
    print(f"üîó Thread ID: {args.thread_id or 'Auto-gerado'}")
    print("=" * 80)
    
    try:
        # Executar an√°lise
        for i, result in enumerate(run_meta_analysis(
            user_query=args.query,
            thread_id=args.thread_id,
            use_memory=args.memory
        )):
            
            # Verificar se h√° erro
            if "error" in result:
                print(f"‚ùå Erro: {result['error']}")
                break
            
            # Mostrar progresso
            if "messages" in result and result["messages"]:
                last_message = result["messages"][-1]
                agent = result.get("current_agent", "system")
                phase = result.get("current_phase", "unknown")
                
                print(f"\n[{i+1}] ü§ñ {agent.upper()} ({phase})")
                print(f"üí¨ {last_message.get('content', '')[:200]}...")
                
                # Mostrar m√©tricas quando dispon√≠veis
                if result.get("processed_articles"):
                    print(f"üìö Artigos processados: {len(result['processed_articles'])}")
                
                if result.get("statistical_analysis"):
                    analysis = result["statistical_analysis"]
                    if isinstance(analysis, dict):
                        effect_size = analysis.get("pooled_effect_size", "N/A")
                        print(f"üìä Effect size: {effect_size}")
                
                if result.get("final_report"):
                    print("‚úÖ Relat√≥rio final dispon√≠vel!")
                    
                print("-" * 40)
        
        print("\n‚úÖ Meta-an√°lise conclu√≠da!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

def show_examples():
    """Mostra exemplos de queries v√°lidas."""
    
    examples = [
        {
            "title": "Meta-an√°lise de interven√ß√µes farmacol√≥gicas",
            "query": """Realize uma meta-an√°lise sobre a efic√°cia da metformina 
            versus placebo para preven√ß√£o de diabetes tipo 2 em adultos com 
            pr√©-diabetes. Inclua an√°lise de heterogeneidade e forest plot."""
        },
        {
            "title": "Meta-an√°lise de interven√ß√µes psicol√≥gicas",
            "query": """Conduza uma meta-an√°lise comparando terapia cognitivo-comportamental 
            versus mindfulness para tratamento de depress√£o em adultos. 
            Avalie qualidade da evid√™ncia e heterogeneidade."""
        },
        {
            "title": "Meta-an√°lise de interven√ß√µes cir√∫rgicas",
            "query": """Fa√ßa uma meta-an√°lise comparando cirurgia laparosc√≥pica 
            versus cirurgia aberta para apendicectomia. Foque em tempo de 
            recupera√ß√£o e complica√ß√µes p√≥s-operat√≥rias."""
        },
        {
            "title": "Meta-an√°lise de diagn√≥stico",
            "query": """Realize uma meta-an√°lise sobre a acur√°cia diagn√≥stica 
            da resson√¢ncia magn√©tica versus tomografia computadorizada para 
            detec√ß√£o de AVC isqu√™mico agudo."""
        },
        {
            "title": "Meta-an√°lise de fatores de risco",
            "query": """Conduza uma meta-an√°lise sobre a associa√ß√£o entre 
            consumo de √°lcool e risco de c√¢ncer de mama em mulheres. 
            Calcule odds ratio pooled e intervalos de confian√ßa."""
        }
    ]
    
    print("üìö EXEMPLOS DE QUERIES PARA METANALYST-AGENT")
    print("=" * 60)
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. {example['title']}")
        print(f"   Query: {example['query'].strip()}")
    
    print("\nüí° DICAS:")
    print("- Seja espec√≠fico sobre Population, Intervention, Comparison, Outcome (PICO)")
    print("- Mencione tipos de an√°lise desejados (forest plot, heterogeneidade, etc.)")
    print("- Especifique popula√ß√£o-alvo quando relevante")
    print("- Indique medidas de efeito de interesse (OR, RR, MD, SMD)")

def run_interactive():
    """Executa o sistema em modo interativo."""
    
    print("ü§ñ METANALYST-AGENT - Modo Interativo")
    print("Digite 'quit' para sair")
    print("=" * 50)
    
    while True:
        try:
            query = input("\nüìã Digite sua query de meta-an√°lise: ").strip()
            
            if query.lower() in ['quit', 'exit', 'sair']:
                print("üëã Encerrando sistema...")
                break
            
            if not query:
                print("‚ö†Ô∏è Query vazia. Tente novamente.")
                continue
            
            print(f"\nüöÄ Executando: {query[:100]}...")
            
            # Executar an√°lise
            for result in run_meta_analysis(query, use_memory=True):
                if "error" in result:
                    print(f"‚ùå Erro: {result['error']}")
                    break
                
                # Mostrar apenas resultado final
                if result.get("final_report"):
                    print("‚úÖ Meta-an√°lise conclu√≠da!")
                    break
        
        except KeyboardInterrupt:
            print("\nüëã Encerrando sistema...")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    # Verificar se deve executar modo interativo
    if len(sys.argv) == 1:
        run_interactive()
    else:
        main()