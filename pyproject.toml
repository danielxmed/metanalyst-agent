[tool.poetry]
name = "metanalyst-agent"
version = "0.1.0"
description = "Automated medical meta-analysis generation using multi-agent systems with LangGraph"
authors = ["Nobrega Medtech <contact@nobregamedtech.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/danielxmed/metanalyst-agent"
repository = "https://github.com/danielxmed/metanalyst-agent"
documentation = "https://github.com/danielxmed/metanalyst-agent/docs"
keywords = ["meta-analysis", "medical-research", "langgraph", "multi-agent", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

[tool.poetry.dependencies]
python = "^3.11"

# Core LangGraph and LangChain dependencies
langgraph = "^0.2.74"
langchain = "^0.3.0"
langchain-core = "^0.3.0"
langchain-anthropic = "^0.2.0"
langchain-openai = "^0.2.0"
langchain-community = "^0.3.0"

# API clients
tavily-python = "^0.5.0"
openai = "^1.51.0"
anthropic = "^0.34.0"

# Vector storage and embeddings
faiss-cpu = "^1.8.0"
numpy = "^1.26.0"
scipy = "^1.11.0"

# Data processing and analysis
pandas = "^2.1.0"
matplotlib = "^3.8.0"
plotly = "^5.17.0"
seaborn = "^0.13.0"

# Web scraping and processing
beautifulsoup4 = "^4.12.0"
lxml = "^4.9.0"
html2text = "^2020.1.16"
markdownify = "^0.11.6"

# File processing
python-docx = "^1.1.0"
pypdf = "^3.17.0"
openpyxl = "^3.1.0"

# HTTP and async
httpx = "^0.25.0"
aiohttp = "^3.9.0"
requests = "^2.31.0"

# Configuration and environment
python-dotenv = "^1.0.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# Utility libraries
click = "^8.1.0"
rich = "^13.7.0"
typer = "^0.9.0"
tqdm = "^4.66.0"
python-dateutil = "^2.8.0"

# Logging and monitoring
loguru = "^0.7.0"
structlog = "^23.2.0"

# Data validation
marshmallow = "^3.20.0"
jsonschema = "^4.20.0"

# Optional dependencies for advanced features
jinja2 = { version = "^3.1.0", optional = true }
weasyprint = { version = "^60.0", optional = true }
reportlab = { version = "^4.0.0", optional = true }

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
httpx-mock = "^0.10.0"

# Code quality
black = "^23.12.0"
isort = "^5.13.0"
flake8 = "^6.1.0"
mypy = "^1.8.0"
pylint = "^3.0.0"
bandit = "^1.7.0"
safety = "^2.3.0"

# Documentation
sphinx = "^7.2.0"
sphinx-autodoc-typehints = "^1.25.0"
myst-parser = "^2.0.0"
furo = "^2023.9.10"

# Development tools
pre-commit = "^3.6.0"
ipython = "^8.18.0"
jupyter = "^1.0.0"
nbconvert = "^7.12.0"

# Type checking
types-requests = "^2.31.0"
types-python-dateutil = "^2.8.0"
types-beautifulsoup4 = "^4.12.0"

[tool.poetry.extras]
pdf = ["weasyprint", "reportlab"]
templates = ["jinja2"]
all = ["weasyprint", "reportlab", "jinja2"]

[tool.poetry.scripts]
metanalyst = "src.main:main"
metanalyst-cli = "src.cli:app"
metanalyst-enhanced = "src.cli_enhanced:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "tavily.*",
    "plotly.*",
    "matplotlib.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require API keys",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 8
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-parents = 8
max-attributes = 15
min-public-methods = 1
max-public-methods = 25
max-bool-expr = 5
